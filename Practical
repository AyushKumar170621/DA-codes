/*1) Given a sorted array of +ve integers containing few duplicate elements design a algo and implement it using a programm  to 
find whether the given key is present in the array or not.
if it  is present find total no of copies of the given key ....*/
#include <iostream>

using namespace std;

int main()
{
    int n,key;
    cout<<"Enter size of array :";
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
        cin>>a[i];
    cout<<"Enter key :";
    cin>>key;
    int count = -1;
    for(int i=0;i<n;i++)
    {
        if(key == a[i])
            ++count;
    }
    if(count == -1)
        cout<<"Key is not present in array"<<endl;
    else
        cout<<"Key is present and number of occurence is "<<count+1<<endl;
    return 0;
}
/*2)Given a sorted array of positive integers design a algo and implement it using a programm to find three indexes 
i,j,k such that arr[i]+arr[j]=arr[k];*/
#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"Enter size of array :";
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
        cin>>a[i];
    int i,j,k;
    for(i=0;i<n;i++)
    {
        for(j=i+1 ;j < n ;j++)
        {
            for(k=j+1 ; k<n ;k++)
            {
                if(a[i]+a[j] == a[k])
                    cout<<i<<" "<<j<<" "<<k<<endl;
                if(a[i]+a[j] > a[k])
                    break;
            }
        }
    }
    return 0;
}

/*3) Given a array of non negitive integers design a algo and implement it using a prog to count the no of pairs of 
integers such that their differences is equal to the given key */
#include <iostream>

using namespace std;

int main()
{
    int n,key,c=0;
    cout<<"Enter size of array :";
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
        cin>>a[i];
    cout<<"Enter key :";
    cin>>key;
    int i,j,k;
    for(i=0;i<n-1;i++)
    {
        for(j=i+1 ;j < n ;j++)
        {
            if(abs(a[i] - a[j])==key)
                c++;
        }
    }
    cout<<"Number of pair having difference equal to "<<key<<"are "<<c<<endl;
    return 0;
}
